
export default function App() {
  let arr = [0, 0, 2, 0, 9, 0, 0, 4, 0, 5, 0, 0, 0];

  // Remove leading zeros
  while (arr[0] === 0) {
    arr.shift();
  }
  // Remove trailing zeros
  while (arr[arr.length - 1] === 0) {
    arr.pop();
  }

  // console.log(arr);

  function flattenArrayWithDepth(arr, maxDepth) {
    let flattened = [];

    function flatten(innerArr, currentDepth) {
      innerArr.forEach(function (element) {
        if (Array.isArray(element) && currentDepth < maxDepth) {
          flatten(element, currentDepth + 1);
        } else {
          flattened.push(element);
        }
      });
    }

    flatten(arr, 1);
    return flattened;
  }

  // Example usage with maximum depth 2:
  let nestedArray = [1, [2, [3, 4], 5], [6, [7, 8]]];
  let flatArray = flattenArrayWithDepth(nestedArray, 2);
  console.log(flatArray); // Output: [1, 2, 3, 4, 5, 6, [7, 8]]


  console.log(myapp(multiData));
  // const flat = flatArray.reduce((value, index) => {
  //   return index++;
  // }, 1);
  // console.log(flat);

  return (
    <div className="App">
      <h1>Check all console</h1>
    </div>
  );
}
